name: Pipelines Staging

on:
  push:
    branches:
      - main

jobs:
  checkout-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: List directory content for debugging
        run: ls -R

  create-env-file-api:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: List directory content for debugging
        run: ls -R
      - name: Create env file for API backend
        run: |
          if [ -d "./communities/packages/api" ]; then
            cd communities/packages/api && \
            touch .env && \
            echo "API_PORT=4000" > .env && \
            echo "API_URL=https://backcommunities.eze.ink" >> .env && \
            echo "NODE_ENV=production" >> .env && \
            echo "SECRET=WriteYourSecret" >> .env && \
            echo "FRONTEND_URL=https://communities.eze.ink" >> .env && \
            echo "MONGO_URL=mongodb+srv://eze:nMWN2NG50nSLJrOC@eze-communities.ufwbl4d.mongodb.net/?retryWrites=true&w=majority" >> .env && \
            echo "CLOUDINARY_CLOUD_NAME=dyekwrvwe" >> .env && \
            echo "CLOUDINARY_API_KEY=981519692274267" >> .env && \
            echo "CLOUDINARY_SECRET=EnwDIzzscMxY5SacVWoqUXE0mzw" >> .env && \
            echo "MAILGUN_API_KEY=YOUR_MAILGUN_API_KEY" >> .env && \
            echo "MAILGUN_DOMAIN=YOUR_MAILGUN_DOMAIN" >> .env
          else
            echo "Directory communities/packages/api does not exist."
            exit 1
          fi

  create-env-file-landing-page:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: Create env file for landing page
        run: |
          if [ -d "./landing-page" ]; then
            cd landing-page && \
            touch .env && \
            echo "REACT_APP_API_URL=https://backcommunities.eze.ink" > .env && \
            echo 'NEXT_PUBLIC_MAP_BASE_URL="https://back-end.kaeyros.shop"' >> .env && \
            echo 'NEXT_PUBLIC_COMMUNITIES_URL="https://communities.eze.ink/"' >> .env && \
            echo 'NEXT_PUBLIC_SSO_LOGIN_URL="https://sso.eze.ink/auth/login"' >> .env
          else
            echo "Directory landing-page does not exist."
            exit 1
          fi

  create-env-file-communities-packages:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: Create env file for communities frontend
        run: |
          if [ -d "./communities/packages/frontend" ]; then
            cd communities/packages/frontend && \
            touch .env && \
            echo "NODE_ENV=http://localhost:4000" > .env && \
            echo "GOOGLE_ANALYTICS_ID=G-MD706N8TZV" >> .env && \
            echo "NEXT_API_PRODUCTION_URL=https://backcommunities.eze.ink" >> .env && \
            echo "NEXT_PUBLIC_COMMUNITIES_URL=https://communities.eze.ink" >> .env && \
            echo "NEXT_PUBLIC_SSO_LOGIN_URL=https://sso.eze.ink/auth/login" >> .env && \
            echo "NEXT_PUBLIC_LANDINGPAGE_URL=https://eze.ink" >> .env
          else
            echo "Directory communities/packages/frontend does not exist."
            exit 1
          fi

  create-env-file-sso:
    runs-on: ubuntu-latest
    needs: checkout-repository
    steps:
      - name: Create env file for SSO
        run: |
          if [ -d "./sso/eze-auth0" ]; then
            cd sso/eze-auth0 && \
            touch .env && \
            echo "MONGODB_URI=mongodb+srv://eze:mongodb123@cluster0.dbnvshu.mongodb.net/eze_sso?retryWrites=true&w=majority&appName=Cluster0" > .env && \
            echo "PORT=3000" >> .env && \
            echo "SSO_URL=https://sso.eze.ink" >> .env && \
            echo "REDIRECT_ORIGIN=https://eze.ink" >> .env && \
            echo "CALLBACK_URL=https://sso.eze.ink/auth/login/callback" >> .env
          else
            echo "Directory sso/eze-auth0 does not exist."
            exit 1
          fi

  login-dockerhub:
    runs-on: ubuntu-latest
    needs: [create-env-file-api, create-env-file-landing-page, create-env-file-communities-packages, create-env-file-sso]
    steps:
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

  build-and-push-frontend-image:
    runs-on: ubuntu-latest
    needs: login-dockerhub
    steps:
      - name: Build frontend Docker image
        run: docker build -t ezekielkaeyros/frontend_eze_staging ./communities
      - name: Push frontend Docker image
        run: docker push ezekielkaeyros/frontend_eze_staging:latest

  build-and-push-backend-image:
    runs-on: ubuntu-latest
    needs: login-dockerhub
    steps:
      - name: Build backend Docker image
        run: docker build -t ezekielkaeyros/backend_communities_staging ./communities/packages/api
      - name: Push backend Docker image
        run: docker push ezekielkaeyros/backend_communities_staging:latest

  build-and-push-landing-image:
    runs-on: ubuntu-latest
    needs: login-dockerhub
    steps:
      - name: Build landing Docker image
        run: docker build -t ezekielkaeyros/eze_landing_staging ./landing-page
      - name: Push landing Docker image
        run: docker push ezekielkaeyros/eze_landing_staging:latest

  build-and-push-sso-image:
    runs-on: ubuntu-latest
    needs: login-dockerhub
    steps:
      - name: Build SSO image
        run: docker build -t ezekielkaeyros/sso_staging ./sso/eze-auth0
      - name: Push SSO image
        run: docker push ezekielkaeyros/sso_staging:latest
