var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import fs from 'fs';
import path from 'path';
import { getDefaultExport, hasHOC, hasStaticName, parseFile, calculatePageDir, existPages, existLocalesFolderWithNamespaces, } from './utils';
var test = /\.(tsx|ts|js|mjs|jsx)$/;
function nextTranslate(nextConfig) {
    if (nextConfig === void 0) { nextConfig = {}; }
    var basePath = pkgDir();
    basePath = path.resolve(path.relative(basePath, process.env.NEXT_TRANSLATE_PATH || '.'));
    var nextConfigI18n = nextConfig.i18n || {};
    var _a = require(path.join(basePath, 'i18n')), _b = _a.locales, locales = _b === void 0 ? nextConfigI18n.locales || [] : _b, _c = _a.defaultLocale, defaultLocale = _c === void 0 ? nextConfigI18n.defaultLocale || 'en' : _c, _d = _a.domains, domains = _d === void 0 ? nextConfigI18n.domains : _d, _e = _a.localeDetection, localeDetection = _e === void 0 ? nextConfigI18n.localeDetection : _e, _f = _a.loader, loader = _f === void 0 ? true : _f, pagesInDir = _a.pagesInDir, _g = _a.extensionsRgx, extensionsRgx = _g === void 0 ? test : _g, _h = _a.revalidate, revalidate = _h === void 0 ? 0 : _h;
    var nextConfigWithI18n = __assign(__assign({}, nextConfig), { i18n: {
            locales: locales,
            defaultLocale: defaultLocale,
            domains: domains,
            localeDetection: localeDetection,
        } });
    var pagesFolder = calculatePageDir('pages', pagesInDir, basePath);
    var appFolder = calculatePageDir('app', pagesInDir, basePath);
    var existLocalesFolder = existLocalesFolderWithNamespaces(basePath);
    var existPagesFolder = existPages(basePath, pagesFolder);
    var hasGetInitialPropsOnAppJs = false;
    var hasAppJs = false;
    if (!existPagesFolder && !existPages(basePath, appFolder)) {
        return nextConfigWithI18n;
    }
    if (existPagesFolder) {
        var pagesPath = path.join(basePath, pagesFolder);
        var app = fs
            .readdirSync(pagesPath)
            .find(function (page) { return page.startsWith('_app.'); });
        if (app) {
            var appPkg = parseFile(basePath, path.join(pagesPath, app));
            var defaultExport = getDefaultExport(appPkg);
            hasAppJs = true;
            if (defaultExport) {
                var isGetInitialProps = hasStaticName(appPkg, defaultExport, 'getInitialProps');
                hasGetInitialPropsOnAppJs = isGetInitialProps || hasHOC(appPkg);
            }
        }
    }
    return __assign(__assign({}, nextConfigWithI18n), { webpack: function (conf, options) {
            var config = typeof nextConfig.webpack === 'function'
                ? nextConfig.webpack(conf, options)
                : conf;
            if (!config.resolve)
                config.resolve = {};
            if (!config.module)
                config.module = {};
            if (!config.module.rules)
                config.module.rules = [];
            config.resolve.alias = __assign(__assign({}, (config.resolve.alias || {})), { '@next-translate-root': path.resolve(basePath) });
            if (!loader)
                return config;
            config.module.rules.push({
                test: test,
                use: {
                    loader: 'next-translate-plugin/loader',
                    options: {
                        basePath: basePath,
                        pagesFolder: path.join(pagesFolder, '/').replace(/\\/g, '/'),
                        appFolder: path.join(appFolder, '/').replace(/\\/g, '/'),
                        hasAppJs: hasAppJs,
                        hasGetInitialPropsOnAppJs: hasGetInitialPropsOnAppJs,
                        extensionsRgx: extensionsRgx,
                        revalidate: revalidate,
                        existLocalesFolder: existLocalesFolder,
                    },
                },
            });
            return config;
        } });
}
function pkgDir() {
    try {
        return require('pkg-dir').sync() || process.cwd();
    }
    catch (e) {
        return process.cwd();
    }
}
module.exports = nextTranslate;
export default nextTranslate;
